AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Creates a ubuntu EC2 instance as development envrionment for Kevin with automation to auto stop/start the instance.

Parameters:
  EC2AMI:
    Type: String
    Default: ''
  LatestEC2AMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/canonical/ubuntu/server/20.04/stable/current/amd64/hvm/ebs-gp2/ami-id
  InstanceType:
    Type: String
    AllowedValues:
      - t3.medium
      - t3.large
      - t3.xlarge
    Default: t3.medium
  OfficeIPCIDR:
    Type: String
  HomeIPCIDR:
    Type: String
  EC2VolumeSize:
    Type: String
    Default: 20
  InstancePassword:
    Type: String
    NoEcho: true
  RepeatPassword:
    Type: String
    NoEcho: true
  TimeZone:
    Type: String
    AllowedValues:
      - AEDT
      - AEST
  NotificationEmail:
    Type: String

Conditions:
  UseSSMAMI: !Equals [!Ref EC2AMI, '']

Mappings:
  CronExpression:
    Stop:
      AEDT: 'cron(0 8 ? * MON-FRI *)'
      AEST: 'cron(0 9 ? * MON-FRI *)'
    Start:
      AEDT: 'cron(0 20 ? * SUN-THU *)'
      AEST: 'cron(0 21 ? * SUN-THU *)'

Resources:
  PasswordVerificationFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import cfnresponse

          def lambda_handler(event, context):
              if event["RequestType"] == "Delete":
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              else:
                  password1 = event["ResourceProperties"]["InstancePassword"]
                  password2 = event["ResourceProperties"]["RepeatPassword"]
                  if password1 != password2:
                      cfnresponse.send(event, context, cfnresponse.FAILED, {}, reason="RepeatPassword does not match InstancePassword")
                  else:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.8

  VerifyPassword:
    Type: Custom::VerifyPassword
    Properties:
      ServiceToken: !GetAtt PasswordVerificationFunction.Arn
      InstancePassword: !Ref InstancePassword
      RepeatPassword: !Ref RepeatPassword

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      GroupDescription: SecurityGroup for Kevin development instance.
      SecurityGroupIngress:
        - IpProtocol: tcp
          CidrIp: !Ref OfficeIPCIDR
          FromPort: 22
          ToPort: 22

  SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      CidrIp: !Ref HomeIPCIDR
      FromPort: 22
      ToPort: 22
      GroupId: !GetAtt SecurityGroup.GroupId

  UbuntuEC2:
    Type: AWS::EC2::Instance
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    DependsOn: VerifyPassword
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !If
        - UseSSMAMI
        - !Ref LatestEC2AMI
        - !Ref EC2AMI
      InstanceType: !Ref InstanceType
      SecurityGroupIds:
        - !GetAtt SecurityGroup.GroupId
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs:
            DeleteOnTermination: true
            Encrypted: true
            VolumeSize: !Ref EC2VolumeSize
            VolumeType: gp3
      UserData:
        'Fn::Base64': !If
          - UseSSMAMI
          - !Sub |
            #!/bin/bash -ex
            apt update -y
            apt install -y python
            apt install -y python-setuptools
            mkdir -p /opt/aws/bin
            wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
            python -m easy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-latest.tar.gz
            exec > >(sudo tee /var/log/user-data.log) 2>&1
              sudo -u ubuntu bash -c "$(curl -fsSL https://raw.githubusercontent.com/kazhala/scripts/master/install/ubuntu_init.sh)"
            sudo /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource UbuntuEC2 --region ${AWS::Region}
            sudo echo ubuntu:${InstancePassword} | sudo chpasswd
            rm aws-cfn-bootstrap-latest.tar.gz
          - ''
      Tags:
        - Key: Name
          Value: kevin-dev

    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M

  DNSSNSTopic:
    Type: AWS::SNS::Topic

  DNSSNSSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref DNSSNSTopic
      Protocol: email
      Endpoint: !Ref NotificationEmail

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:StartInstances'
                  - 'ec2:StopInstances'
                  - 'ec2:DescribeInstances'
                  - 'sns:Publish'
                Resource: '*'
          PolicyName: StartStopEC2

  LambdaStartEC2:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import os
          client = boto3.client("ec2")
          waiter = client.get_waiter('instance_running')
          sns = boto3.client("sns")

          def get_instance_name(tags):
              name = None
              for tag in tags:
                  if tag["Key"] == "Name":
                      name = tag["Value"]
              return name

          def lambda_handler(event, context):
              instance_list = os.getenv("INSTANCE_TO_START", "").split(",")
              client.start_instances(InstanceIds=instance_list)
              if os.getenv("TOPIC_ARN"):
                  waiter.wait(InstanceIds=instance_list)
                  instance_details = client.describe_instances(InstanceIds=instance_list)
                  message = ""
                  for instance in instance_details["Reservations"][0]["Instances"]:
                      name = get_instance_name(instance["Tags"]) or instance["InstanceId"]
                      message += "%s%s:\n" % ("\n" if message else "", name)
                      message += "%s\n" % instance["PublicDnsName"]
                  sns.publish(TopicArn=os.getenv("TOPIC_ARN"), Message=message, Subject="EC2 DNS")

      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.8
      Timeout: 60
      Environment:
        Variables:
          INSTANCE_TO_START: !Ref UbuntuEC2
          TOPIC_ARN: !Ref DNSSNSTopic

  LambdaStopEC2:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import os
          client = boto3.client("ec2")

          def lambda_handler(event, context):
              instance_list = os.getenv("INSTANCE_TO_STOP", "").split(",")
              client.stop_instances(InstanceIds=instance_list)
      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.8
      Timeout: 10
      Environment:
        Variables:
          INSTANCE_TO_STOP: !Ref UbuntuEC2

  CloudWatchStopEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub 'Scheduled event to stop ${UbuntuEC2}'
      ScheduleExpression: !FindInMap
        - CronExpression
        - Stop
        - !Ref TimeZone
      State: ENABLED
      Targets:
        - Arn: !GetAtt LambdaStopEC2.Arn
          Id: !Ref LambdaStopEC2

  LambdaInvokePermmisionStop:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt LambdaStopEC2.Arn
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt CloudWatchStopEvent.Arn

  CloudWatchStartEvent:
    Type: AWS::Events::Rule
    Properties:
      Description: !Sub 'Scheduled event to start ${UbuntuEC2}'
      ScheduleExpression: !FindInMap
        - CronExpression
        - Start
        - !Ref TimeZone
      State: ENABLED
      Targets:
        - Arn: !GetAtt LambdaStartEC2.Arn
          Id: !Ref LambdaStartEC2

  LambdaInvokePermmisionStart:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt LambdaStartEC2.Arn
      Principal: 'events.amazonaws.com'
      SourceArn: !GetAtt CloudWatchStartEvent.Arn

  IAMAdminRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - 'ec2.amazonaws.com'
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref IAMAdminRole
