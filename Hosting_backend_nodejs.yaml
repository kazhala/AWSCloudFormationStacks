AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Cloudformation stack to host a nodejs backend using elasticbeanstalk. This template is intended to use
  with a registered domain on Route53 and you will need to create a SSL certificate through ACM in your
  region rather than the us-east-1 region used for cloudfront. Before using the template, you need to make
  sure you have a s3 bucket created by elasticbeanstalk, you could run 'aws elasticbeanstalk create-storage-location'
  if you don't have one and then upload your nodejs zip to the s3 bucket 'aws s3 mv youzip.zip s3://<ebBucket>/<yourpath>/<youzip>.zip'.
  This stack is intended to use with the frontend template(https://github.com/kazhala/AWSCloudFormationStacks/blob/master/Hosting_frontend_S3.yaml),
  however, you could set this up without the frontend.
Parameters:
  ApplicationName:
    Type: String
    MinLength: 3
    MaxLength: 100
    AllowedPattern: '[a-z0-9A-Z-_\.]*'
    Description: 'Application name'
  MaxInstance:
    Type: String
    Description: 'Max number of instances'
    Default: '2'
    AllowedPattern: '[0-9]*'
  MinInstance:
    Type: String
    Description: 'Min number of instances'
    Default: '1'
    AllowedPattern: '[0-9]*'
  IpAddressCidr:
    Type: String
    Description: 'Your ip address cidr to access EB instance, e.g. 1.1.1.1/32'
    AllowedPattern: '[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}/[0-9]{1,2}'
  S3ZipKey:
    Type: String
    Description: 'S3 path of the zip file in elasticbeanstalk bucket (s3://elasticbeanstalk/<yourpath>/<yourzip> would be <yourpath>/<yourzip>), to update EB, upload a different name, e.g.name1.0.0'
  KeyPair:
    Type: 'AWS::EC2::KeyPair::KeyName'
    Description: Name of an existing EC2 key pairs for accessing new EC2 instance
  SSLCertificateArn:
    Type: String
    Description: SSL certificate arn
    AllowedPattern: 'arn:aws:acm:[a-z]{2}-[a-z]*-[0-9]:.*:certificate.*'
    Default: arn:aws:acm:ap-southeast-2:378756445655:certificate/607606ca-529e-4e68-b5b7-c387df69a582
  HostedZoneId:
    Type: AWS::Route53::HostedZone::Id
    Description: HostedZone where the record of route53 should be created in
  FrontendStack:
    Description: get the export value from frontend stack (bucketname example.com), specify either this or the backendurl
    Type: String
  BackendUrl:
    Description: if frontendstack is selected, then skip this value, otherwise, enter a prefered fully qualified domainname
    Type: String
Conditions:
  HasFrontend: !Not [!Equals ['', !Ref FrontendStack]]
Resources:
  BeanStalkApplication:
    Type: 'AWS::ElasticBeanstalk::Application'
    Properties:
      ApplicationName: !Ref ApplicationName
      Description: !Sub 'Backend for ${ApplicationName}'
  BeanStalkApplicationVersion:
    Type: 'AWS::ElasticBeanstalk::ApplicationVersion'
    Properties:
      ApplicationName: !Ref BeanStalkApplication
      Description: !Sub 'Version of ${BeanStalkApplication}'
      SourceBundle:
        S3Bucket: 'elasticbeanstalk-ap-southeast-2-378756445655'
        S3Key: !Ref S3ZipKey
  BeanStalkConfigTemplate:
    Type: 'AWS::ElasticBeanstalk::ConfigurationTemplate'
    Properties:
      ApplicationName: !Ref BeanStalkApplication
      Description: !Sub 'Config template for ${BeanStalkApplication}'
      SolutionStackName: '64bit Amazon Linux 2018.03 v4.13.1 running Node.js'
      OptionSettings:
        - Namespace: aws:autoscaling:asg
          OptionName: MinSize
          Value: !Ref MinInstance
        - Namespace: aws:autoscaling:asg
          OptionName: MaxSize
          Value: !Ref MaxInstance
        - Namespace: aws:ec2:instances
          OptionName: EnableSpot
          Value: 'true'
        - Namespace: aws:ec2:instances
          OptionName: SpotFleetOnDemandBase
          Value: '1'
        - Namespace: aws:ec2:instances
          OptionName: SpotFleetOnDemandAboveBasePercentage
          Value: '0'
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: EC2KeyName
          Value: !Ref KeyPair
        - Namespace: aws:autoscaling:launchconfiguration
          OptionName: SSHSourceRestriction
          Value: !Sub 'tcp, 22, 22, ${IpAddressCidr}'
        - Namespace: aws:elb:listener:443
          OptionName: ListenerProtocol
          Value: HTTPS
        - Namespace: aws:elb:listener:443
          OptionName: SSLCertificateId
          Value: !Ref SSLCertificateArn
        - Namespace: aws:elb:listener:443
          OptionName: InstancePort
          Value: 80
        - Namespace: aws:elasticbeanstalk:container:nodejs
          OptionName: NodeCommand
          Value: 'npm start'
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: PORT
          Value: '{{resolve:ssm:/mealternative/PORT:1}}'
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: CLIENT_URL
          Value: '{{resolve:ssm:/mealternative/CLIENT_URL:1}}'
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: DATABASE
          Value: '{{resolve:ssm:/mealternative/DATABASE:1}}'
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: SENDGRID_API_KEY
          Value: '{{resolve:ssm:/mealternative/SENDGRID_API_KEY:1}}'
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: JWT_ACCOUNT_ACTIVATION
          Value: '{{resolve:ssm:/mealternative/JWT_ACCOUNT_ACTIVATION:1}}'
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: JWT_SECRET
          Value: '{{resolve:ssm:/mealternative/JWT_SECRET:1}}'
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: JWT_RESET_PASSWORD
          Value: '{{resolve:ssm:/mealternative/JWT_RESET_PASSWORD:1}}'
        - Namespace: aws:elasticbeanstalk:application:environment
          OptionName: EMAIL_FROM
          Value: '{{resolve:ssm:/mealternative/EMAIL_FROM:1}}'
  BeanStalkEnvironment:
    Type: 'AWS::ElasticBeanstalk::Environment'
    Properties:
      ApplicationName: !Ref BeanStalkApplication
      Description: !Sub "${BeanStalkApplicationVersion}'s environment"
      TemplateName: !Ref BeanStalkConfigTemplate
      CNAMEPrefix: !Ref ApplicationName
      Tier:
        Name: WebServer
        Type: Standard
      VersionLabel: !Ref BeanStalkApplicationVersion
      Tags:
        - Key: WebServer
          Value: 'yes'
  Route53CloudfrontRecord:
    Type: 'AWS::Route53::RecordSet'
    Properties:
      Name: 
        !If
        - HasFrontend
        - !Join
            - '.'
            - - 'api'
              - Fn::ImportValue:
                  !Sub '${FrontendStack}-BucketName'
        - !Ref BackendUrl
      AliasTarget:
        HostedZoneId: 'Z2PCDNR3VC2G1N'
        DNSName: !Sub '${ApplicationName}.ap-southeast-2.elasticbeanstalk.com'
      Comment: !Sub '${ApplicationName}-api-A-record'
      HostedZoneId: !Ref HostedZoneId
      Type: 'A'
