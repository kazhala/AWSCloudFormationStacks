AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Cloudformation template for building a functional custom VPC with public and private
  subnet as well as bastion host and private instance
Parameters:
  VPCIPCidr:
    Type: String
    AllowedPattern: '^[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}/[0-9]{2}'
    Description: A valid ipcidr block for vpc
    Default: '10.1.0.0/16'
  NamePrefix:
    Type: String
    Description: Name prefix for sub resources
    Default: 'playground'
  SubnetCidr:
    Type: CommaDelimitedList
    Description: A list of ipcidr block for subnet, expecting 6
    Default: '10.1.1.0/24, 10.1.2.0/24, 10.1.3.0/24, 10.1.4.0/24, 10.1.5.0/24, 10.1.6.0/24'
  TurrmurraSSH:
    Description: The IP address range to access through the SG via ssh
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
  EppingSSH:
    Description: The IP address range to access through the SG via ssh
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
Resources:
  CustomVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VPCIPCidr
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Ref NamePrefix
  PublicSubnetA:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 0
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select
        - 0
        - !Ref SubnetCidr
      VpcId: !Ref CustomVPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${NamePrefix}-PublicA'
  PublicSubnetB:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 1
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select
        - 1
        - !Ref SubnetCidr
      VpcId: !Ref CustomVPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${NamePrefix}-PublicB'
  PublicSubnetC:
    Type: 'AWS::EC2::Subnet'
    Properties:
      AvailabilityZone: !Select
        - 2
        - Fn::GetAZs: !Ref 'AWS::Region'
      CidrBlock: !Select
        - 2
        - !Ref SubnetCidr
      VpcId: !Ref CustomVPC
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${NamePrefix}-PublicC'
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub 'igw-${NamePrefix}'
  GatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref CustomVPC
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref CustomVPC
      Tags:
        - Key: Name
          Value: !Sub '${NamePrefix}-Public'
  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicASubnetAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetA
  PublicBSubnetAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetB
  PublicCSubnetAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnetC
  DefaultSecurityGroup:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: 'https://kazhala-cloudformation-storage.s3-ap-southeast-2.amazonaws.com/SG_default.yaml'
      TimeoutInMinutes: 5
      Parameters:
        VpcId: !Ref CustomVPC
        TurrmurraSSH: !Ref TurrmurraSSH
        EppingSSH: !Ref EppingSSH
        RemoteSSH: ''
        NamePrefix: !Ref NamePrefix
  DefaultInstance:
    Type: 'AWS::CloudFormation::Stack'
    Properties:
      TemplateURL: 'https://kazhala-cloudformation-storage.s3-ap-southeast-2.amazonaws.com/EC2_amz2.yaml'
      TimeoutInMinutes: 10
      Parameters:
        InstanceRole: !Ref InstanceRole
        SubnetId: !Ref PublicSubnetB
        SecurityGroups: !GetAtt [DefaultSecurityGroup, Outputs.DefaultSSHSG]
        KeyName: ap-southeast-2_playground
      Tags:
        - Key: Name
          Value: !Sub '${NamePrefix}-general'
  InstanceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Description: !Sub '${AWS::StackName} ec2 instance role'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: instance-role-inline
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: '*'
                Action:
                  - 's3:*'
                  - 'cloudformation:*'
                  - 'ec2:*'
  InstanceProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      InstanceProfileName: !Ref InstanceRole
      Roles:
        - !Ref InstanceRole
  FlowLogRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Description: !Sub '${AWS::StackName} flow log role'
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - vpc-flow-logs.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: flow-log-inline
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Resource: '*'
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                  - 'logs:PutLogEvents'
      Tags:
        - Key: Name
          Value: !Sub '${NamePrefix}-vpc-flow-log'
  VPCFlowLog:
    Type: 'AWS::EC2::FlowLog'
    Properties:
      DeliverLogsPermissionArn: !GetAtt FlowLogRole.Arn
      LogDestinationType: 'cloud-watch-logs'
      LogGroupName: '/kazhala/vpc/flowlogs'
      ResourceId: !Ref CustomVPC
      ResourceType: 'VPC'
      TrafficType: 'ALL'
